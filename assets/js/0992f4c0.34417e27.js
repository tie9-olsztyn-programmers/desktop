"use strict";(self.webpackChunkdesktop=self.webpackChunkdesktop||[]).push([[488],{2401:(o,n,e)=>{e.r(n),e.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>s,frontMatter:()=>r,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"Avalonia Intro/Pobieranie danych z kontrolek/Z CheckBox, RadioButton, ComBobox","title":"Dane z CheckBox, RadioButton, ComboBox","description":"-","source":"@site/docs/1. Avalonia Intro/2. Pobieranie danych z kontrolek/2. Z CheckBox, RadioButton, ComBobox.mdx","sourceDirName":"1. Avalonia Intro/2. Pobieranie danych z kontrolek","slug":"/Avalonia Intro/Pobieranie danych z kontrolek/Z CheckBox, RadioButton, ComBobox","permalink":"/desktop/docs/Avalonia Intro/Pobieranie danych z kontrolek/Z CheckBox, RadioButton, ComBobox","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/1. Avalonia Intro/2. Pobieranie danych z kontrolek/2. Z CheckBox, RadioButton, ComBobox.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Dane z CheckBox, RadioButton, ComboBox"},"sidebar":"tutorialSidebar","previous":{"title":"Dane z TextBlock, TextBox","permalink":"/desktop/docs/Avalonia Intro/Pobieranie danych z kontrolek/Z TextBox, TextBlock, Button"},"next":{"title":"Podstawowe menad\u017cery uk\u0142adu (layouts)","permalink":"/desktop/docs/Avalonia Intro/Menad\u017cery uk\u0142adu"}}');var a=e(4848),i=e(8453);const r={title:"Dane z CheckBox, RadioButton, ComboBox"},c=void 0,d={},u=[{value:"title: Dane z CheckBox, RadioButton, ComboBox",id:"title-dane-z-checkbox-radiobutton-combobox",level:2},{value:"<code>MainWindow.xaml</code>",id:"mainwindowxaml",level:3},{value:"<code>MainWindow.xaml.cs</code>",id:"mainwindowxamlcs",level:3}];function l(o){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...o.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"title-dane-z-checkbox-radiobutton-combobox",children:"title: Dane z CheckBox, RadioButton, ComboBox"}),"\n",(0,a.jsx)(n.h3,{id:"mainwindowxaml",children:(0,a.jsx)(n.code,{children:"MainWindow.xaml"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<StackPanel Margin="20" HorizontalAlignment="Center">\n    <CheckBox x:Name="CheckBox" Content="Check me" />\n    <StackPanel Orientation="Horizontal" Margin="10,20,0,0">\n        \x3c!-- Grupa 1 --\x3e\n        <RadioButton x:Name="Radiobutton1" Content="Opt 1" IsChecked="True" GroupName="Group1"/>\n        <RadioButton x:Name="Radiobutton2" Content="Opt 2" Margin="20,0,0,0" GroupName="Group1"/>\n    </StackPanel>\n\n    <StackPanel Orientation="Vertical" Margin="10,20,0,0">\n        \x3c!-- Grupa 2 --\x3e\n        <RadioButton x:Name="Radiobutton3" Content="Opt 3" Margin="20,0,0,0" IsChecked="True" GroupName="Group2"/>\n        <RadioButton x:Name="Radiobutton4" Content="Opt 4" Margin="20,0,0,0" GroupName="Group2"/>\n        <RadioButton x:Name="Radiobutton5" Content="Opt 5" Margin="20,0,0,0" IsChecked="False" GroupName="Group2"/>\n        <RadioButton x:Name="Radiobutton6" Content="Opt 6" Margin="20,0,0,0" GroupName="Group2"/>\n    </StackPanel>\n\n    <ComboBox x:Name="ComboBox" SelectedIndex="0" Width="200" Margin="0,20,0,0">\n        <ComboBoxItem Content="Item 1" />\n        <ComboBoxItem Content="Item 2" />\n        <ComboBoxItem Content="Item 3" />\n    </ComboBox>\n\n    <Button x:Name="SubmitButton" Content="Submit" Width="100"\n            Margin="10,20,0,0" HorizontalAlignment="Center"/>\n\n    <Label x:Name="infolabel" Content="-" />\n</StackPanel>\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"IsCheched"})," - przechowuje informacje o tym, czy kontrolka zosta\u0142a zaznaczona"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"GroupName"})," - grupowanie kontrolek"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"ComboBox"})," - jest to kontener wewn\u0105trz, kt\xf3rego mog\u0119 by\u0107 elementy r\xf3\u017cnego typu"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Label"})," - to najprostsza kontrolka do wy\u015bwietlania tekstu"]}),"\n",(0,a.jsx)(n.h3,{id:"mainwindowxamlcs",children:(0,a.jsx)(n.code,{children:"MainWindow.xaml.cs"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public partial class MainWindow : Window\n{\n\n private List<RadioButton> group2RadioButtons;\n\n public MainWindow()\n {\n    InitializeComponent();\n\n    // GDY R\u0118CZNIE TWORZYMY LIST\u0118\n    // group2RadioButtons = new List<RadioButton>\n    // {\n    //     Radiobutton3,\n    //     Radiobutton4,\n    //     Radiobutton5,\n    //     Radiobutton6\n    // };\n\n    SubmitButton.Click += SubmitButton_Click; // przypisanie funkcji do Button w kodzie C#\n }\n\n private void SubmitButton_Click(object sender, RoutedEventArgs e)\n {\n    try\n    {\n        // okre\u015blenie, czy checkbox zosta\u0142 zaznaczony\n        var checkBoxValue = MyCheckBox.IsChecked == true ? "Checked" : "Unchecked";\n\n        // Znalezienie zaznaczonego RadioButton z Group1\n        var radioButtonValue = Radiobutton1.IsChecked == true ? "Op 1" : "Op 2" ;\n\n        // Znalezienie zaznaczonego RadioButton z Group2\n        // // Gdy r\u0119cznie stworzyli\u015bmy list\u0119 kontrolek RadioButtons\n        // var selectedGroup2RadioButton = group2RadioButtons.FirstOrDefault(rb => rb.IsChecked == true);\n        // var group2RadioButtonValue = selectedGroup2RadioButton?.Content?.ToString() ?? "No selection";\n\n        // Dynamiczne znajdowanie radiobuttona z grupy 2\n        var selectedGroup2RadioButton = this.GetLogicalDescendants()\n            .OfType<RadioButton>()\n            .FirstOrDefault(rb => rb.GroupName == "Group2" && rb.IsChecked == true) ;\n        var group2RadioButtonValue = selectedGroup2RadioButton?.Content?.ToString() ?? "No selection";\n\n        // Rzutowanie SelectedItem na ComboBoxItem i uzyskanie Content\n        var comboBoxValue = (MyComboBox.SelectedItem as ComboBoxItem)?.Content?.ToString() ?? "No selection";\n\n        var content = $"CheckBox: {checkBoxValue}\\n" +\n                      $"Group 1 RadioButton: {radioButtonValue}\\n" +\n                      $"Group 2 RadioButton: {group2RadioButtonValue}\\n" +\n                      $"ComboBox: {comboBoxValue}";\n\n        //File.WriteAllText("output.txt", content); // zapisanie w \u015bcie\u017cce YourProject/bin/Debug/net8.0/output.txt\n        var desktopPath = Environment.GetFolderPath((Environment.SpecialFolder.Desktop));\n        var filePath = Path.Combine(desktopPath, "dane z aplikacji");\n        File.WriteAllText(filePath, content);\n\n        infolabel.Content = "Zapisano" ;\n\n\n    } catch (Exception ex)\n    {\n        infolabel.Content = $"B\u0142\u0105d: {ex.Message}";\n    }\n }\n}\n'})})]})}function s(o={}){const{wrapper:n}={...(0,i.R)(),...o.components};return n?(0,a.jsx)(n,{...o,children:(0,a.jsx)(l,{...o})}):l(o)}},8453:(o,n,e)=>{e.d(n,{R:()=>r,x:()=>c});var t=e(6540);const a={},i=t.createContext(a);function r(o){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof o?o(n):{...n,...o}}),[n,o])}function c(o){let n;return n=o.disableParentContext?"function"==typeof o.components?o.components(a):o.components||a:r(o.components),t.createElement(i.Provider,{value:n},o.children)}}}]);